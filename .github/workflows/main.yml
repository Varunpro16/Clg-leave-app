name: Frontend Build & Deploy

on:
  push:
    branches: [main] 
    paths:
      - "client/**"
  workflow_dispatch:

jobs:
  build-push:
    runs-on: self-hosted
    env:
      FRONTEND_ECR_REGISTRY: ${{ secrets.FRONTEND_ECR_REGISTRY }}
      FRONTEND_ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
      IMAGE_TAG: ${{ vars.FRONTEND_BUILD_NUMBER }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Increment Frontend Build Number
      run: |
        NEW_TAG=$(( ${{ vars.FRONTEND_BUILD_NUMBER }} + 1 ))
        echo "IMAGE_TAG=$NEW_TAG" >> $GITHUB_ENV


    - name: Build and Push Frontend Image
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $FRONTEND_ECR_REGISTRY

        docker build -t $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG client/
        docker push $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-push
    runs-on: self-hosted
    env:
      FRONTEND_ECR_REGISTRY: ${{ secrets.FRONTEND_ECR_REGISTRY }}
      FRONTEND_ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
      IMAGE_TAG: ${{ vars.FRONTEND_BUILD_NUMBER }}
      DEPLOY_FOLDER: ${{ secrets.DEPLOY_FOLDER }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Copy docker-compose to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "client/docker-compose.yml"
        target: "~/frontend/"
        overwrite: true

    - name: Deploy Frontend to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_FOLDER }}/client

          # Set environment variables
          export FRONTEND_ECR_REGISTRY=${{ secrets.FRONTEND_ECR_REGISTRY }}
          export FRONTEND_ECR_REPOSITORY=${{ secrets.FRONTEND_ECR_REPOSITORY }}
          export IMAGE_TAG=${{ vars.FRONTEND_BUILD_NUMBER }}
          export DEPLOY_FOLDER=${{ secrets.DEPLOY_FOLDER }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR_REGISTRY

          # Remove old image and pull the new one
          docker rmi -f $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$(( ${{ vars.FRONTEND_BUILD_NUMBER }} - 1 )) || true
          docker pull $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG

          # Deploy with docker-compose
          docker-compose up -d 
          docker image prune -f
