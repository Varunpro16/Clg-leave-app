name: Frontend Build & Deploy

on:
  push:
    branches: [main] 
    paths:
      - "client/**"
  workflow_dispatch:

jobs:
  build-push:
    runs-on: self-hosted
    env:
      FRONTEND_ECR_REGISTRY: ${{ secrets.FRONTEND_ECR_REGISTRY }}
      FRONTEND_ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      IMAGE_TAG: ${{ steps.increment.outputs.IMAGE_TAG }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Increment Frontend Build Number
      id: increment  # ðŸ‘ˆ Add an ID to reference outputs
      run: |
        NEW_TAG=$(( ${{ vars.FRONTEND_BUILD_NUMBER }} + 1 ))
        echo "IMAGE_TAG=$NEW_TAG" >> $GITHUB_ENV
        echo "IMAGE_TAG=$NEW_TAG" >> $GITHUB_OUTPUT  # ðŸ‘ˆ Set output for next job

    - name: Build and Push Frontend Image
      run: |
        echo "ðŸš€ Building and pushing image with tag: $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG"
        
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR_REGISTRY

        docker build -t $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG client/
        docker push $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG

    - name: Update GitHub Repository Variable
      run: |
        curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/actions/variables/FRONTEND_BUILD_NUMBER" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"value":"'$IMAGE_TAG'"}'

  deploy:
    needs: build-push
    runs-on: self-hosted
    env:
      FRONTEND_ECR_REGISTRY: ${{ secrets.FRONTEND_ECR_REGISTRY }}
      FRONTEND_ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
      IMAGE_TAG: ${{ needs.build-push.outputs.IMAGE_TAG }}  # ðŸ‘ˆ Use the output from previous job
      DEPLOY_FOLDER: ${{ secrets.DEPLOY_FOLDER }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Copy docker-compose to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "client/docker-compose.yml"
        target: "~/frontend/"
        overwrite: true

    - name: Deploy Frontend to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_FOLDER }}/client
          
          # Set environment variables for docker-compose
          export FRONTEND_ECR_REGISTRY=${{ secrets.FRONTEND_ECR_REGISTRY }}
          export FRONTEND_ECR_REPOSITORY=${{ secrets.FRONTEND_ECR_REPOSITORY }}
          export IMAGE_TAG=${{ needs.build-push.outputs.IMAGE_TAG }}  # ðŸ‘ˆ Use output here
          export DEPLOY_FOLDER=${{ secrets.DEPLOY_FOLDER }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          echo "Using image: $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG"


          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR_REGISTRY
          
          # Remove previous image (if exists), pull new one, and restart container
          docker rmi -f $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$(( $IMAGE_TAG - 1 )) || true
          docker pull $FRONTEND_ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          docker-compose up -d 
          docker image prune -f

